package org.frogpond.utils;

import org.frogpond.LilyException;
import org.frogpond.MetadataException;
import org.frogpond.annotation.LilyField;
import org.frogpond.metadata.RecordTypeMetadata;
import org.frogpond.model.PropertyEntry;
import org.lilyproject.repository.api.IdGenerator;
import org.lilyproject.repository.api.RecordId;
import org.lilyproject.repository.api.Repository;

import java.util.HashMap;
import java.util.Map;

public class LilyUtilities {

    private static String _tableSpace = null;

    public static void setTableSpace(String TS)
    {
        _tableSpace = TS;
    }

    public static RecordId getRecordId(Repository repository, RecordTypeMetadata recordTypeMetadata, Object pojo) throws LilyException {
        PropertyEntry recordIdProperty = recordTypeMetadata.getRecordIdProperty();

        RecordId recordId = null;

        // -- check if a recordIdProperty was set
        if (recordIdProperty == null)
            throw new LilyException("No recordId has been declared. Use the LilyId annotation to declare one.");

        // -- find the variants
        Map<String, String> variants = new HashMap<String, String>();
        //Map<String, String> variants = getVariants(recordTypeMetadata.getVariants(), pojo);

        try {
            // -- get the recordId
            Object objRecordId = MetadataUtilities.getFieldAccessor(recordIdProperty).getValue(pojo);

            // -- check if the recordIdProperty is also a LilyField. If this is the case, we are talking about a user-
            // -- defined RecordId. If no LilyField annotation is found, the recordId is generated by the repository
            if (recordIdProperty.getAnnotation(LilyField.class) != null) {
                recordId = createRecordId(repository.getIdGenerator(), objRecordId, variants);

            } else {
                // -- check if the field already contains a value. If it does we will return that value, otherwise we
                // -- will generate a new id and update the value
                if (objRecordId == null) {
                    // -- generate a new id
                    recordId = (variants.isEmpty()) ? repository.getIdGenerator().newRecordId() : repository.getIdGenerator().newRecordId(variants);

                } else {
                    // -- return the already present id
                    recordId = createRecordId(repository.getIdGenerator(), objRecordId, variants);

                }
            }


        } catch (Exception e) {
            if (e instanceof LilyException) throw (LilyException) e;
            else throw new LilyException("Unable to get the recordId from " + pojo, e);
        }

        recordId.setTableSpace(_tableSpace);
        return recordId;
    }

    public static RecordId getRecordId(Repository repository, String recordIdStr)
    {
        RecordId recordId = repository.getIdGenerator().fromString(recordIdStr);
        recordId.setTableSpace(_tableSpace);
        return recordId;
    }


    protected static Map<String, String> getVariants(Map<String, PropertyEntry> variantProperties, Object pojo) {
        try {
            Map<String, String> result = new HashMap<String, String>();

            for (Map.Entry<String, PropertyEntry> entry : variantProperties.entrySet()) {
                Object variantValue = MetadataUtilities.getFieldAccessor(entry.getValue()).getValue(pojo);

                if (! (variantValue instanceof String)) {
                    throw new MetadataException("Variant " + entry.getKey() + " on " + pojo.getClass() + " should be a String.");
                }

                result.put(entry.getKey(), (String) variantValue);
            }

            return result;
        } catch (Exception e) {
            if (e instanceof LilyException) throw (LilyException) e;
            else throw new LilyException("Unable to get the variants from " + pojo, e);
        }
    }

    public static RecordId createRecordId(IdGenerator idGenerator, Object recordIdValue, Map<String, String> variants) {
        RecordId masterRecordId = (recordIdValue == null) ? null : createRecordId(idGenerator, recordIdValue);

        if (variants.isEmpty()) {
            return (masterRecordId == null) ? idGenerator.newRecordId() : masterRecordId;
        } else {
            return (masterRecordId == null) ? idGenerator.newRecordId(variants) : idGenerator.newRecordId(masterRecordId, variants);
        }
    }

    public static RecordId createRecordId(IdGenerator idGenerator, Object recordIdValue) {
        if (recordIdValue == null) throw new IllegalArgumentException("No recordIdValue was provided");

        RecordId recordId = null;

        if (recordIdValue instanceof RecordId)
            recordId = (RecordId) recordIdValue;

        else if (recordIdValue instanceof String)
            recordId = idGenerator.newRecordId((String) recordIdValue);

        else if (recordIdValue instanceof byte[])
            recordId = idGenerator.fromBytes((byte[]) recordIdValue);
        //--vinay
        else if (recordIdValue != null)
        {
            recordId = idGenerator.newRecordId(recordIdValue.toString());
        }

        else
            throw new LilyException("Unable to convert " + recordIdValue.getClass() + " into a recordId");


        recordId.setTableSpace(_tableSpace);
        return recordId;
    }

}
